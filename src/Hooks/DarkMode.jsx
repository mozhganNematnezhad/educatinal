import { useContext, useEffect } from "react";
import { themeContext } from "Context/Theme/ThemeState";

export const useDarkMode = () => {
  const { theme, setTheme } = useContext(themeContext);
  // console.log("theme-dark", theme);

  const toggleTheme = () => {
    if (theme === "light") setTheme("dark");
    else setTheme("light");
  };

  useEffect(() => {
    localStorage.setItem("theme", theme);
     document.documentElement.className =theme
    document.body.classList.add("dark:bg-slate-900")
  });
  return { theme, toggleTheme };
};









// ******************
// ******************
// ******************
// ******************
// ******************
// ******************
// *قدم اول
//  بعد اجرای کانتکس و  گزاشتن یوزافکت داخل  هوک 
// باید تم رو ست کنیم 
//  useEffect(() => {
//   localStorage.setItem("theme", theme);
// });
// *قدم  دوم
// بعد اومدیم داخل خود کانتکس
// باید استیت خودمون رو از لوکال استورچ بخونیم 
// اومدیم اینجا 
// get 
// کردیم
// یا از لوکال بخونه  با کلا 
// light
// باشه 
// const getTheme = localStorage.getItem("theme")
// console.log("getTheme",getTheme)
// const [theme, setTheme] = useState(getTheme||"light");

// *قدم سوم
// باید داخل هدر یه دکمه بگیرم به عنوان تاگل 

// {/* <button className="TwIN-darkMode" onClick={toggleTheme}> */}
// باید یه تابع بنویسیم که چک کنه
// که اگر لایت دارک بشه اگردارک لایت بشه
// این تابع و چند تا شرط داخلش
// میتونیم دوباره داخل همون کاستوم هوک بنویسم
// واینجا فقط اجرا کنیم

// *قدم چهارم
// یه تابع مینویسم به نام
// toggleTheme 
// اینجا باید شرط بزاریم بگیم که مقدار فعلی تم چی هست
// const toggleTheme = () => {
//   if (theme === "light") setTheme("dark");
//   else setTheme("light");
// };

// return { theme, toggleTheme };
// به جای 
// SetTeme
// ما
// toggleTheme 
// گزاشتیم چون دیگه عملا 
// SetTeme
// در همین یه جا استفاده کردیم

// **قدم پنچم
// -----css------
// پس تا این مرجله کار لاجیکش اکی شد
// حالا میریم سراغ مرحله مربوط به 
// css
// بهترین راه که میشه استفاده کرد برای رنگ های اضلس
// که داخل سایت داریم
// رنگ هایی که داخل لایت و دارک تعییر میکنن
// میایم از متعیرهای 
// css
// استفاده میکنیم در قالب یه سری کلاس

// اینم باید داخل اون
// config
// بزاریم
// darkMode: 'class',

// الان که به بادی دسترسی نداریم چه طوری میتونیم یه کلاس رو به
// بادی اضافه کنیم؟
// مثلا داخل یه کامپوننت میخوایم یه کلاس روبه بادی بدیم
// ازخود دام جاوا اسکرییت میتونیم استفاده کنیم

// الان از کجا میفهیم که لایت یا دارک هست؟
// باید به بادی یه کلاس بدیم که متوجه بشه الان لایت یا دارک هست

// const htmlTage=document.querySelector("html")
// hmtlTag.className =theme
// الان با این دوتا خط یعنی ما تونیسم کلاس دارک رو به 
//تگ 
// html
// اضافه کنیم
// که وفتی کلیک میشه یه بار دارک میشه یه بار لایت اضاقه مییشه

// ***خلاصه شده  بالا** 
// document.documentElement.className =theme
// داکیومنت که کل درخت
// html 
// هست
// documentElement میره سراع 
// html
// document.documentElement.className =theme
// document.body.classList.add("dark:bg-slate-900")

// اگر بخوایم کل بک گراند بادی که الان سفید هست مشکلی کنیم

// ******************
// ******************
// ******************
// ******************
// ******************
// ******************
// ******************
// ******************
// اول از این رفتیم ولی باید به html
// اضافه بشه
// ----ClassList----
// همون جایی که داخل یوز افکت هر بار مقدار تغییر میکرد لوکال استورچ رو ابدیت کن
// اینجا باید این کلاس رو به بادی هم بدیم یعنی هر بار که تعییر میکنه
// کلاس بادی هم تعییر کنه

// document.classList.add("theme")
// اگر کلاس لایت اضافه بشه و بعدش دارک هم بیاریم دیگه لایت پاک نمیکنه کنارش دارک میزاره
// ما اینو نمیخوایم میخوایم یه کلاس باشه برای همین به جای
// classList
// از
// className
// میریم
// -----تدکر------ 
// document.classList.remove("theme")
// کلاس اضافه و حدف میشه همون کلاس
// document.classList.toggle("theme")
// ------------------------
// اگر لایت بشه 
// classList
// رواد میکنه
//با همون مقدار مثلا اگر اول
// دارک باشه 
// classList
// اد میشه دارک

//  لایت میشه
// دوباره اد میشه
// یعنی قبلی پاک نمیشه 
// این جا
// classList aDD
// پاک میکنیم 
// className
// میزاریم مستقیما یه کلاس باشه

// ****مهم مهم مهم مهم -----------
// وقتی از 
// classList
//  استفاده کنید:
  // بدون اثر گذاشتن روی کلاس های دیگه که ممکنه المان مورد نظر داشته باشه،
//  میتونید کلاس اضافه یا حذف کنید

// یه کلاس خاض رو میتونیم اضافه یا حدف کنیم
// classList.add()
// یه کلاس خاص رو اضافه میکنه
// classList.remove("theme")
// یه کلاس خاص رو حدف میکنه

// در حالی که 
// className 
// ضمن اضافه کردن کلاس جدید، کلاسهای قبلی را پاک می کند.

// همه کلاس های اون المنت پاک میکنه وچیزی که خودمون میدیم روقرار میده
// وقتی مساوی میگزاریم
// چیزی اضافه یا حدف نمیشه
// مستقیما همون مقدار ست میشه



// یه تفاوت دیگه هم که دارند اینکه: 
// classList 
// متدهای کارآمدی مثل toggle و replace
//  در اختیارتون میگذاره




// ******************
// ******************
// ******************
// ******************

// ********تدکر:******
// استفاده از هوک ها خودش یه فوانینی داره یعنی
// حتما باید توی بدنه مستقیم
// کامپوننت ازش استفاده کنیم 
// یعنی نمیتونیم داخل یه فانکشنی که
// داخل کامپوننت هست
// ازش استفاده کنیم
// مستقیما باید داخل کانپوننت باشه 
// مثلا 
// toggleTheme
// T
// باید کوجک باشد

// ******************
// ******************
// ******************
// ******************
// اون توابع اون استیت ها هر چیزی که نیازه که داخل  یک کامپوننت معمولی داشته باشیم
// مثل یورافکت چیزهایی که برای هوک میشن رو
// میتونیم داخل یه فایل جاوا اسکریپتی جدا بیاریم و دخیره کنیم
// هر چیزی که ترو وفالز باشه میتونیم این طوری بنویسم

// یه استیت برای تعییر وضعیت ترو وفالز
//  و یه تابع برای تعییر وضعیت
// اگرترو هست فالز بشه اگر فالز هست ترو بشه
// وداخل یوزافکت هم میایم اگرنیاز داشتیم مقداری که باهاش کار میکنیم
// توی لوکال استورچ دخیره بشه توی یوزافکت این کار انجام میدهیم

// چون یوز افکت در هر صورت چه ترو شود و چه فالز یکبار اجرا میشه
// کاستوم  هوک ها یا ارایه ریترن  میکنن یا ابجکت

// یوزاستیت داخل ریکت یه ارایه ریترن میکنن

// ******************
// ******************

// useEffect(() => {
//   localStorage.setItem("theme", theme);
// }, [theme]);

// اینجا چون تم روبه ضورت مستقیم استفاده نمگینیم
// اینجا باید تم رو به عنوان ارگیومنت به یوزافکت پاس بدیم

// ******************
// ******************
// ******************
// ******************
