import { ConsumeAllDataState } from "Context/AllData/AllData";
import React, { useState } from "react";

const SortInDate = () => {
  const {setData } = ConsumeAllDataState();
  // console.log(data);

  const [selectedOption, setSelectedOption] = useState("");

  const selectChange = (e) => {
    const value = e.target.value;
    console.log("value", value);
    setSelectedOption(value);

    if (value === "free") {
      setData((data) => ({
        ...data,
        course: data.course.sort((a, b) => a.cost - b.cost),
        // course:[],
      }));
    } else if (value === "capacity") {
      setData((data) => ({
        ...data,
        course: data.course.sort((a, b) => a.capacity - b.capacity),
      }));
    } else {
      setData((data) => ({
        ...data,
        course: data.course.sort((a, b) => b.cost - a.cost),
      }));
    }
  };

  return (
    <div className="flex flex-col  items-end">
      <div className=" bg-[#f3f4f6] w-full md:w-[40%] p-4 rounded-lg dark:bg-[#001E3C] ">
        <div className=" border-2 border-solid border-[#0eb582] rounded-lg mt-4">
          <select
            onChange={selectChange}
            value={selectedOption}
            className="w-full outline-0 rounded-lg dark:bg-[#1B314C] dark:text-white"
          >
            {/* <option className="text-[#0eb582] disabled">
             مرتب سازی  
          </option> */}
            <option value="cost" className="option text-[#0eb582] dark:text-white">
              {" "}
              مرتب سازی براساس بیشترین قیمت
            </option>

            <option value="free" className="option text-[#0eb582] dark:text-white">
              {" "}
              مرتب سازی براساس دوره های رایگان
            </option>

            <option value="capacity" className="option text-[#0eb582] dark:text-white">
              {" "}
              مرتب سازی براساس ظرفیت دوره ها
            </option>
          </select>
        </div>
      </div>
    </div>
  );
};

export default SortInDate;

// ********************
// ********************
// ********************
// ********************
// ********************

// برای هر کدوم از این ابشن ها یه ولیویی رو اختصاص بدیم که متوجه بشیم که هر ولیو کارش چی هست
// اگر اولی انتخاب کردولیو 1 هست
// دومی ولیوی2هست

// اینجا به setData
// نیاز داریم چون میخوایم کل دیتا رو ابدیت کنیم

//array= [1, 3, 5, 23, 26, 63]

//arr.sort((a,b)=>a-b)
// arr.sort((a,b)=>a+b)

// [1, 3, 5, 23, 26, 63]
// اختلاف این دو تا مقدار دو تا عدد منفی دربیاد به ضورت ضعودی مرتب سازی میکند
// یعنی از کم به زیاد

// 63, 26, 23, 5, 3, 1]
// arr.sort((a,b)=>b+a)
// arr.sort((a,b)=>b-a)
// اگراختلاف عدد مثبت بشه یهنی از زیاد به کم
// نزولی
// ----------------------
// ----------------------
// گفت جمع نباید بنویسیم
// چه
// a-b , b-a
// معنایی ندارد
// وقتی این عدد
// وقتی تفریق میکنیم
// این مشخض میشه که
// اکر عدد منفی به دست اومد
// یعنی اول و کوچکتر بوده
// صعودی
// اگرعدد مثبت به دست اومد
// یعنی اولی بزرگتر بوده
// نرولی
// ----------------------
// ----------------------

// الان چه طوری میتونیم براساس قیمتی که داریم ایتم ها رو
// مرتب کنیم
// ایتم های ما یه ارایه ثابت نیستن مثل اعداد بالا
// ارایه ای هستن که داخل هر کدوم  از این ارایه هاا چندین ابجکت وجود دارد
//   هر ابجکت هم
// خودش یه
// price
// داره

// [

//   {
//     price:60,name:mozhgan
//   } ,
// {},
// {}
// ]

// از کال بک خود
// setData
// استفاده کنیم
// اگربه جای یه مقدار مشخص  یه تاب رو پاس بدیم
// این میاد اون تابعی که بهش پاس دادیم رو اجرا میکنه
// و مقداری که از تابع دریافت میکنیم
// داخل استیت قرار میدهد
// این مال زمانی هست که بخوایم یه پردازشی رو روی دیتا انجام بدیم

// مقداری که این کال بک بهمون میده استیت فعلی هست که داریم
// ****    نکته اول ******
// الان داخل کانتکس ما
// data ,setData
// به صورت ابجکت گزاشتیم
// یه ابجکت با دو تا پروپرتی
// داخل ست دیتا هم به صورت ابجکت میگیریم
// SetData((course)=>data.course.sort((a,b)=>b-a))
// الان اگه این تابع اجرا بشه
// یعنی ست استیت انجام بشه
// استیت ما مستقیما مییشه
// یه ارایه کلی
// در صورتی که استیت ما یه کورس داشتیم یه مقاله

// const [ data ,setData]= useState({
//   course:[],
//   article:[]
// })

// اینجا چیزی که ریترن میشه از  تابع ست دیتا باید یه ابجکت باشه

// if (value === "cost") {
//   setData({...data ,course:data.course.sort((a,b)=>a.cost -b.cost)});
// }

//به ابجکت هست با دو تا مقدار
// یه ارتیکل و یه کورس
// حالا اگه بخوایم ریترن کنیم
// چیزی که ریترن میشه برای ست استیت باید مطابق با همون مقدار اولیه باشه که به استیت دادریم
// چیزی که داخل این کال بک ما باید ریترن کنیم یه ابجکت باید باشه با دو تا پروپرتی
// چون الان میخوایم روی کورس تمرکز کنیم میتونیم از
// ...
// استفاده کنیم
// که مقادیر قبلی حقط بشه
// چون ارتیکل و کورس داخل یه استیت کلی به اسم
// data
// قراز دارن

// ***نکته دوم
// توی فیلتر عملا یه سری دیتاها پاک میشن
// توی سورت دیتایی پاک نمیشه برای همین داریم ست استیت میکنیم
// توی سرچ هم اون ست استیت اتفاق نمی افتاد
// چون  میخواستیم فیلتر کنیم
// بعصی دیتاها پاک میشن

// توی سورت دیتاها فقط جابه جا میشن
// ترتیب فرق میکنه ولی همون داده ها هست
// خود دیتا همیشه ثابت هست
// وهمیشه داریم

// *****

// -----------------------
// ---------------کال بک ست استیت--------
// هر وقت ما میخوایم استیت ابدیت کنیم و مابه مقدار قبلی استیت نیاز داریم
// مقدار جدید استیت به مقدار قبلی وابسته هست
// از کال بک خود ست استیت استفاده میکنیم

// befor
// setstate(stat+ a)

// after
// setsate((prev)=>
// return prev + "a"
// )
// -----------------------
// -----------------------
// if else  and return
// توی تابع کاری بکنیم که هر جا کار تابع تموم شد که ادامه تابع اجرا نشه که یه سری کارهای اضافه انجام بشه
// اکر داخل تابع من یه جیزی رو ریترن کردم
// دیگه نیاز نیست من دومی رو
// else-if
// بنویسیم
// وقتی چیزی ریترن میشه در واقع از تابع خارح میشه
// امادر ریکت وقنی  ست دیتا اتفاق می افتد در شرط اول
// ممکنه ست دیتا اتفاق بیفته وادامه تابع اجرا شود
// ولی وقتی
// else
// بزاریم دیگه سراع جک کردنش نمیریم

// اگر چیزی رو در تابع  براساس
// شزظمون ریترن کردیم نیازی نیست
// else
// بزاریم
